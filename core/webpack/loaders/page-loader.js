const { parse, compileTemplate } = require("@vue/component-compiler-utils");
const compiler = require("vue-template-compiler");
const htmlparser = require("htmlparser2");
const loaderUtils = require("loader-utils");
const parser = require("@babel/parser");
const traverse = require("@babel/traverse");
const generator = require("@babel/generator");

const loader = async function (source, map) {
    console.log('page-loader')
    let callback = this.async();
    let result = source;
    try {

        var sourceDesc = toDescriptor(source);
        
        // Remove comment lines at beginning of script block that were generated by the SFC parser
        if (sourceDesc.script) {
            sourceDesc.script.content = sourceDesc.script.content.replace(/^(\/\/\n)+/, "");
        }

        var pageBlockIndex = sourceDesc.customBlocks.findIndex(customBlock => customBlock.type === 'page')

        if (pageBlockIndex >= 0) {
            
            var pageBlock = sourceDesc.customBlocks[pageBlockIndex]
            result = `<template>${pageBlock.content}</template>\n`

            if (sourceDesc.script)
                result += `<script>${sourceDesc.script.content}</script>\n`

                result += '<style>'
            if (sourceDesc.styles)
            {
                sourceDesc.styles.forEach(styleBlock => {
                    result += styleBlock.content
                });
            }         
            result += '</style>'
        }
        
        callback(null, result, map);

    } catch (error) {
        callback(error);
    }
};

/**
 * Returns the SFC descriptor for a given SFC sourcecode
 * @param source
 */
const toDescriptor = source =>
    parse({
        source: source,
        compiler,
        needMap: false
    });

function blockToHTML(block) {
    if (block) {
        let attrToHtmlAttr = ([key, value]) => ` ${key}="${value}" `;
        let attrs = Object.entries(block.attrs).reduce((accum, curr) => accum + attrToHtmlAttr(curr), "");
        return `<${block.type} ${attrs}>${block.content}</${block.type}>`;
    }
}

/**
 * Given a SFC's descriptor, returns the SFC's source **without** the template part
 * @param descriptor - SFC descriptor
 * @returns {string} - SFC source code
 */
const descriptorToHTML = descriptor =>
    // descriptor.customBlocks
    //   .map(cb => blockToHTML(cb))
    //   .join("\n") +
    `<template>${descriptor.template.content}</template>` +
    blockToHTML(descriptor.script) +
    descriptor.styles.map(cb => blockToHTML(cb)).join("\n");

exports.default = loader;
// exports.resolve = getMergedCode;
